// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

// MODELS OF AUTH AND ADMIN
model Computer {
  id    String @id @default(cuid())
  brand String
  cores Int
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id])

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id])

  @@index([user_id])
}

model VerificationCode {
  id      String   @id @unique
  user_id String
  code    String
  expires DateTime
  user    User     @relation(references: [id], fields: [user_id])

  @@index([user_id])
  @@map(name: "verification_code")
}

model PasswordResetToken {
  id      String @id /// Token to send inside the reset link
  expires BigInt /// Expiration (in milliseconds) of the token
  user_id String
  user    User   @relation(references: [id], fields: [user_id])

  @@index([expires])
  @@index([user_id])
  @@map("password_reset_tokens")
}

// MODELS OF DB
model User {
  id                  String               @id @unique
  status              String               @default("ACTIVE") // ACTIVE, INACTIVE, BLOCKED
  username            String
  name                String?
  email               String?              @unique
  email_verified      DateTime?
  phone               String?
  rut                 String?              @unique
  image               String?
  location            String? // Location of the trainer e.g "Las Condes, Santiago, Chile"
  email_notifications Boolean              @default(true)
  // authentication
  auth_session        Session[]
  key                 Key[]
  VerificationCode    VerificationCode[]
  PasswordResetToken  PasswordResetToken[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  // teamMembers          TeamMember[]
  // invitations          Invitation[]
  //
  //TRAINER
  //
  trainer_active      Boolean              @default(false)
  bank_active         Boolean              @default(false) // If the trainer has linked his bank account
  // payku_id            String?              @unique
  trainerPost         TrainerPost[] // This is the post that the trainer can create to promote his services
  // Site      Site[]
  // ContractGroup       TrainerGroup[]
  //
  // BOTH (TRAINER & USER)
  //
  trainer_review      Review[]             @relation("trainer_review")
  user_review         Review[]             @relation("user_review")
  trainer_contract    Contract[]           @relation("trainer_contract")
  user_contract       Contract[]           @relation("user_contract")

  //
  // Credits & Payments
  //
  // suscription          Suscription[]
  credits        Credit[]
  creditPurchase CreditPurchase[]
  trainerPayout  TrainerPayout[] //Trainer
  bankAccount    BankAccount[] //Trainer
  // add location to user for futures features like: train with other users or create a group
}

model TrainerPost {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  trainerId     String
  trainer       User       @relation(fields: [trainerId], references: [id])
  disabled      Boolean    @default(false) // If the post is disabled or not
  // 
  credits       Int // Number of credits that it cost per session
  planId        Int? //payment plan id  
  //
  experience    Int        @default(1) // Level of experience of the training e.g 1: Beginner, 2: Intermediate, 3: Advanced
  category      String // Types of sports that the trainer can teach by slug
  subcategory   String? // Types of sports that the trainer can teach e.g 1234 = 1: Football, 2: Basketball, 3: Tennis, 4: Volleyball
  methodology   String?    @default("ALL") // Methodology of the trainer e.g ALL, ONLINE, PRESENCIAL, IN GROUP
  phone         String
  images        Json
  name          String
  social_medias String? // [] of social medias
  //Contract
  free_days     Int        @default(1) // Number of free sessions that the trainer includes
  default_days  Int        @default(3) // Number of days that the trainer recommends to train with him per week
  default_hours Int        @default(2) // Number of hours that the trainer recommends to train with him per session
  // discount_at         Int             @default(100) // Minimum number of students to apply a discount
  // discount            Int             @default(0) // Discount that the trainer applies when the number of students is equal or greater than discount_at
  //Texts
  title         String
  bio           String?
  course_info   String?
  location      String? // Location of the trainer e.g "Las Condes, Santiago, Chile"
  // primary_color       String?  @default("#000000")
  // free_files          String? // [] of files MAX 3 (PDF,IMAGES...)
  Contract      Contract[]

  @@index([trainerId])
  @@index([location])
  @@index([category])
}

model Contract {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  finishAt       DateTime // Date when the contract expires, make a function to calculate when is the expiration date
  cancelationAt  DateTime? // Date when the contract have been canceled
  //
  userId         String // User that is paying the contract
  user           User         @relation("user_contract", fields: [userId], references: [id])
  user_name      String
  user_phone     String
  trainerId      String // Trainer that is receiving the contract
  trainer        User         @relation("trainer_contract", fields: [trainerId], references: [id])
  trainer_name   String
  trainer_phone  String
  postId         String? // Post that the user is buying
  post           TrainerPost? @relation(fields: [postId], references: [id])
  // Plan, price and payment
  plan           Int?
  total_credits  Int // Total credits that the client bought
  // hours_credits  Int // Number of hours that the client bought
  days           Int // Number of days that client bought
  //
  canceled       Boolean      @default(false) // If the contract can be canceled or not
  //Schedule
  schedule_days  Int? // Number of days that the contract includes e.g 135 = 1: Monday, 3: Wednesday, 5: Friday
  shcedule_hours Int? // Number of hours that the contract includes e.g 12 = 1: 1 hour, 2: 2 hours

  @@index([trainerId])
  @@index([userId])
  @@index([postId])
}

// model TrainerGroup {
//   id          String   @id @default(uuid())
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @default(now())
//   finishAt    DateTime // Date when the contract expires, make a function to calculate when is the expiration date
//   trainerId   String
//   trainer     Trainer  @relation(fields: [trainerId], references: [id])
//   // 
//   title       String
//   description String?
//   img         String?
//   clients     Int      @default(0) // Number of users that is in the plan
//   max_clients Int      @default(5) // Number of max users that the group can have
//   status      Boolean  @default(true) // If the contract is active live or not
//   location    String? // Location of the group e.g "Cancha de futbol 5, Las Condes, Santiago, Chile"
//   days        Int? // Number of days that the contract includes e.g 135 = 1: Monday, 3: Wednesday, 5: Friday
//   hour        Int? // Number of hours that the contract includes e.g 12AM or 21PM
//   //
//   discount_at Int      @default(3) // Minimum number of students to apply a discount
//   discount    Int      @default(0) // Discount that the trainer applies when the number of students is equal or greater than discount_at
//   price       Float    @default(0) // Price of the group (Free or paid)
//   credits     Int      @default(0) // Number of credits that alredy have been used

//   @@index([trainerId])
// }

model Review {
  id        String   @id @default(uuid())
  userId    String
  trainerId String
  rating    Float
  comment   String
  createdAt DateTime @default(now())

  user    User @relation("user_review", fields: [userId], references: [id])
  trainer User @relation("trainer_review", fields: [trainerId], references: [id])

  @@index([userId])
  @@index([trainerId])
}

// PAYMENTS

model Credit {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  credits   Int      @default(0)
  hasPlan   Boolean  @default(false) // If the user has a plan or not
  plan      Int? // Plan of the user e.g "BASIC", "PREMIUM", "ELITE"

  @@index([userId])
}

model CreditPurchase {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  amount        Float    @default(0) // Amount of money that the user paid
  credits       Int      @default(0) // Amount of credits that the user bought
  transactionId String? // ID of the transaction
  status        String   @default("register") // register, pending, success, rejected

  @@index([userId])
}

// model Suscription {
//   id                 String   @id @default(uuid())
//   createdAt          DateTime @default(now())
//   endsAt             DateTime
//   userId             String
//   user               User     @relation(fields: [userId], references: [id])
//   payku_id           String   @unique
//   payku_subscription String?  @unique
//   plan               String   @default("BASIC")
//   quantity           Int      @default(1) // Number of users that is in the plan
//   billingCycleStart  Int? // day of the month when the billing cycle starts
//   monitoringId       String?  @unique // cron job ID for monitoring
// }

model TrainerPayout {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  trainerId String
  trainer   User     @relation(fields: [trainerId], references: [id])
  amount    Float
  status    String   @default("PENDING") // PENDING, PAID, REJECTED

  @@index([trainerId])
}

model BankAccount {
  id                      String   @id @default(uuid())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @default(now())
  trainerId               String
  trainer                 User     @relation(fields: [trainerId], references: [id])
  accountbank_name        String
  accountbank_sbif        Int
  accountbank_type        Int
  accountbank_num         Int
  accountbank_personal_id String

  @@index([trainerId])
}

// model Feature {
//   id        String   @id @default(cuid())
//   name      String?
//   icon      String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   site      Site?    @relation(fields: [siteId], references: [id], onUpdate: Cascade)
//   siteId    String?

//   @@index([siteId])
// }

// model Post {
//   id          String   @id @default(cuid())
//   title       String?
//   description String?
//   content     String?
//   slug        String   @default(cuid())
//   image       String?  @default("https://public.blob.vercel-storage.com/eEZHAoPTOBSYGBE3/hxfcV5V-eInX3jbVUhjAt1suB7zB88uGd1j20b.png")
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   published   Boolean  @default(false)
//   site        Site?    @relation(fields: [siteId], references: [id], onUpdate: Cascade)
//   siteId      String?
//   User        User?    @relation(fields: [userId], references: [id])
//   userId      String?

//   @@unique([slug, siteId])
//   @@index([siteId])
// }

// //TEAMS
// model Team {
//   id          String       @id @default(uuid())
//   name        String
//   slug        String       @unique
//   domain      String?      @unique
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @default(now())
//   members     TeamMember[]
//   invitations Invitation[]
// }

// model TeamMember {
//   id        String   @id @default(uuid())
//   teamId    String
//   userId    String
//   role      String   @default("MEMBER")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())

//   team Team @relation(fields: [teamId], references: [id])
//   user User @relation(fields: [userId], references: [id])

//   @@unique([teamId, userId])
//   @@index([userId])
// }

// model Invitation {
//   id        String   @id @default(uuid())
//   teamId    String
//   email     String
//   token     String   @unique
//   expires   DateTime
//   invitedBy String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())

//   user User @relation(fields: [invitedBy], references: [id])
//   team Team @relation(fields: [teamId], references: [id])

//   @@unique([teamId, email])
// }
